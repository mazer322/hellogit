Pastaba: laikykite, kad visur yra itraukta
   #include <iostream>
   #include <memory>
   #include <algorithm>
   using namespace std;

1.
   class F {
     int a;
     public:
       F(int a_=5) { a = a_; cout << "F::F()" << a << endl; }
       ~F() { cout << "F::~F()" << a << endl; }
   };
   class B {
       F f;
     public:
       B() : f(1) { cout << "B::B()" << endl; }
       B(const F& f_) : f(f_) { cout << "B::B(F)" << endl; }
       ~B() { cout << "B::~B()" << endl; }
   };
   class D : public B {
       F f1;
       F f2;
     public:
       D() : f2(10) { cout << "D::D()" << endl; }
       ~D() { cout << "D::~D()" << endl; }
   };
 Kas bus isvesta:
 1.1 int main()  {     |  1.2 int main()  {  | 1.3 int main() {
       B b();          |       D d;          |      F *pf = new F();
       F f();          |       return 0;     |      auto_ptr<F> apf(new F(2));
       F *pf = new F();|      }              |      auto_ptr<F> apf2(pf);
       return 0;       |                     |      F *pf2 = new F(4);
     }                 |                     |     }

 1.4 Pakeiskite klase D taip, kad, kuriant jos objektus, butu
 naudojamas bazines klases B konstruktorius B(const F&) su parametru F(3).

2.
   class A {
     public:
       virtual void m1() { cout << "A::m1()" << endl; }
       virtual void m2() { cout << "A::m2()" << endl; }
               void m3() { cout << "A::m3()" << endl; }
   };
   class B : public A {
     public:
       virtual void m1() { cout << "B::m1()" << endl; }
               void m3() { cout << "B::m3()" << endl; }
       virtual void m4() { cout << "B::m4()" << endl; }
   };
   class C : public B {
     public:
       virtual void m1() { cout << "C::m1()" << endl; }
       virtual void m2() { cout << "C::m2()" << endl; }
               void m3() { cout << "C::m3()" << endl; }
   };
   class D : public B
   {
     public:
               void m3() { cout << "D::m3()" << endl; }
       virtual void m4() { cout << "D::m4()" << endl; }
   };
   void f(A& a) { a.m1(); a.m2(); a.m3(); }
   void g(B* pb) { pb->m1(); pb->m2(); pb->m3(); pb->m4(); }

 Kurie is siu kvietimu galimi, ir koki isvedima kiekvienas galimas
 kvietimas duos:

   A a; B b; C c; D d;
   f(b);  //2.1
   g(&b); //2.2
   f(c);  //2.3
   g(&c); //2.4
   f(a);  //2.5
   g(&a); //2.6
   f(d);  //2.7
   g(&d); //2.8

3.
   class E {};
   class E2 : public E {};
   int f(int a)
   {
     cout << "1-f()" << a << endl;
     if (a <= 0)
       throw E();
     cout << "2-f()" << a << endl;
     return a + 1;
   }
   void g() { throw E2(); throw E(); }
 Kas bus isvesta:
  3.1 int main() {
       int i = 10;
       try { i = f(1); cout << "i=" << i << endl;
         try {
             i = f(0); cout << "i=" << i << endl;
             i++;
         } catch (E & e) {
           cout << "catch E" << endl;
           i += 2; i = f(-2);
         }
       } catch (E2 & e2) {
         cout << "catch E2" << endl;
       } catch (E & e) {
         cout << "catch E" << endl;
       }
       cout << "exit i=" << i << endl;
       return 0;
      }
  3.2 int main() {
       try {
          cout << "#1" << endl;
          try {
            g(); cout << "#2" << endl;
          } catch (E & e) {
            cout << "catch E" << endl;
            throw;
          }
         cout << "#4" << endl;
       } catch (E2 & e) {
         cout << "catch E2" << endl;
         throw;
       }
       cout << "exit" << endl;
       return 0;
      }
4.
 Kurie is kvietimu 4.1-4.9 leistini?
  class X {
      void ma();
    protected:
      void mb();
    public:
      void mc();
  };
  class Y : private X {
    public:
      void na() { ma()/*4.1*/; mb()/*4.2*/; mc()/*4.3*/; }
  };
  int main() {
    Y y; X x;
    x.ma()/*4.4*/; x.mb()/*4.5*/; x.mc()/*4.6*/;
    y.ma()/*4.7*/; y.mb()/*4.8*/; y.mc()/*4.9*/;
    return 0;
  }

5.Parasyti sablonine klase, sablono parametras turi buti tipas T. Si klase turi tureti tipo T nari-lauka A,
 konstruktoriu su vienu T tipo argumentu, kurio reiksme inicializuoja lauka A, ir dvi funkcijas narius:
 void add(T& b), kuri sudeda a su b operatoriaus + pagalba ir gauta reiksme priskirti a (a = a + b);
 void print(), kuri isveda lauka A i cout operatoriaus << pagalba.
 Panaudokite sia sablonine klase(sukurti klases objekta, iskviesti jam add(),print()), kai sablono parametro reiksme
 yra int. Parasykite klase X, kuria  butu galima naudoti, kaip sio sablono parametra ir panaudokite sablona su klase X.

6.Parasyti programa, kuri: sukuria tuscia standartines bibliotekos konteinerio list<int> objekta; prie jo galo prijungia
 elementus 2, po to 3; prie pradzios prijungia elementus 11, 12; tarp antrojo ir treciojo elemento iterpia elementa 10;
 ismeta priespaskutini elementa; panaudodama iteratoriu perbega konteineri ir randa visu elementu suma.

7.Tegu v yra standartines bibliotekos vector<int> tipo konteineris. Standartines bibliotekos algoritmo sort()
 pagalba isrusiuokite v pagal tokia taisykle: pirmiausia teigiami skaiciai didejimo tvarka, po to 0, po to
 neigiami skaiciai mazejimo tvarka.



